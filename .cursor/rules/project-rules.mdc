---
alwaysApply: true
---
# Project Rules: Slack-MM2 Sync

## Документация и структура
- В каждой директории проекта должен быть актуальный `README.md` с описанием назначения, структуры и всех поддиректорий.
- При добавлении новых файлов или директорий, README.md должен быть обновлён с описанием изменений.
- README.md должен содержать раздел с соглашениями и особенностями реализации для данной части проекта.

## Best practices
- Для backend используется FastAPI, структура — по best practices (разделение на app, tests, requirements, Dockerfile и т.д.).
- Для frontend используется React (Vite), структура — по best practices (src, public, package.json, Dockerfile и т.д.).
- Для инфраструктуры — отдельная директория infra с манифестами Kubernetes, миграциями БД и документацией по деплою.

## Cursor instructions
- Все соглашения и правила фиксируются в .cursor/rules/project-rules.mdc и дублируются в README.md соответствующих директорий. Этот файл предваряется служебным заголовком alwaysApply: true, его нельзя удалять или изменять.
- При изменениях в структуре или логике проекта обязательно обновлять правила и документацию.
- Перед коммитом проверять, что документация и правила соответствуют текущему состоянию кода и структуры.
- Если есть очевидное следующее действие - не предлагай мне выполнить его, но выполняй сам

## Примеры
- Добавил новый роут в backend — обнови backend/README.md и, если нужно, .cursor/rules/.
- Добавил компонент во frontend — опиши его в frontend/README.md.
- Добавил манифест в infra/k8s — опиши его в infra/README.md. 

## Путь к данным и миграциям
- Все пути к миграциям, SQL-скриптам и данным должны быть относительными (относительно текущего файла или рабочей директории), чтобы проект работал и в Docker, и при локальном запуске. 

## Docker Compose
- Для backend не использовать volume ../backend:/app, чтобы не перекрывать содержимое, скопированное в образ (особенно миграции). Это гарантирует универсальный запуск и работу миграций как в Docker, так и нативно. 

## Тесты
- В backend тесты должны быть разделены на unit (backend/tests/unit) и integration (backend/tests/integration).
- Общие фикстуры — в backend/tests/conftest.py.
- Все тесты должны быть автоматизированы и запускаться через pytest. 
- Интеграционные тесты Mattermost API должны использовать переменные окружения MATTERMOST_API_TOKEN и MATTERMOST_API_URL, чтобы работать и в dev, и в prod. 
- Юнит-тесты не требуют запуска внешних сервисов и могут запускаться где угодно.
- Интеграционные тесты требуют поднятых сервисов (backend, Mattermost, БД) и обычно запускаются из-под docker-compose или в CI. 

## Async-парадигма
- Все новые обработчики и тяжёлые операции должны быть реализованы через async def (или async/await для JS).
- Загрузка файла (upload) должна отдавать фронту ответ об успехе или неуспехе сразу после завершения загрузки файла, до парсинга.
- Парсинг, импорт и экспорт должны выполняться асинхронно, не блокируя ответ пользователю.

## Терминология
- **upload** — процесс загрузки файла (например, бэкапа Slack) с фронта на backend.
- **webhook** — приём обновления через вебхук (например, события из Slack в режиме реального времени).
- **parsing** — процедура чтения и разбора полученных данных (как из файла, так и из вебхука).
- **маппинг (mapping)** — одиночная распарсенная строка/объект, представляющая одну сущность (например, сообщение, пользователь, канал и т.д.).
- **импорт (import)** — процедура занесения маппинга в базу данных проекта.
- **экспорт (export)** — процедура отправки данных из маппинга в Mattermost (через API). 

## Логгирование
- Во всех частях проекта необходимо активно использовать логгирование, чтобы в случае проблемы можно было отследить обстоятельства её возникновения.
- Для логов уровня INFO должно быть правило: одно активное действие - одна строка лога, остальные логи в рамках того же действия (возможно, выполняемые в разных модулях) должны быть уровнем DEBUG.
- Уровень логирования выбирается исходя из задачи: например, загрузка Mattermost ID для маппинга — debug, а не info/error. Логи должны быть информативными, но не избыточными.
- Ожидаемые ошибки бизнес-логики (например, попытка создать пользователя, который уже существует) должны логироваться на уровне debug, а не error.
- Ошибки, которые действительно нарушают работу системы, логируются как error. 

## Backend
- При импорте нового модуля проверяй, не нужно ли его прописать в requirements.txt. Если нужно - пересобери docker compose -f infra/docker-compose.dev.yml up backend -d --build

## Frontend
- При внесении изменений на фронте в jsx-файлы пересобери фронт docker compose -f infra/docker-compose.dev.yml up frontend -d --build

## Распаковка архивов Slack
- Для распаковки Slack-экспорта всегда использовать unzip с параметром -O UTF-8 (или другой нужной кодировкой), чтобы корректно обрабатывались кириллические имена файлов и папок. Не использовать стандартный zipfile из Python для этих целей.

## Frontend
- При внесении изменений на фронте в jsx-файлы пересобери фронт docker compose -f infra/docker-compose.dev.yml up frontend -d --build